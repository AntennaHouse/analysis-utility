<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    version="2.0"
    xmlns:ahf="http://www.antennahouse.com/names/XSLT/Functions/Document"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    exclude-result-prefixes="ahf xs">

<!-- Generate an Ant build file containing a <path> element for each
     XSLT file in $xsl.dir and $copyfit.xsl.dir.  Each <path> contains
     a <pathelement> for each XSLT file on which the current XSLT file
     depends.

     Another build file will import the generated build file and use
     the paths to determine whether or not an XSLT file or any of its
     XSLT dependencies is newer than the target of the <xslt> task.
-->

<!--
   Copyright 2020 Antenna House, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->


<!-- ============================================================= -->
<!-- IMPORTS                                                       -->
<!-- ============================================================= -->

<!-- Common functions, such as 'ahf:basename()'. -->
<xsl:import href="ahf-common.xsl" />


<xsl:output method="xml" indent="yes" />


<!-- ============================================================= -->
<!-- STYLESHEET PARAMETERS                                         -->
<!-- ============================================================= -->

<xsl:param
    name="project"
    select="'paths'"
    as="xs:string" />

<xsl:param
    name="xsl.dir"
    as="xs:string" />

<xsl:param
    name="timestamp"
    as="xs:string" />

<xsl:param
    name="verbose"
    as="xs:string?" />


<!-- ============================================================= -->
<!-- TEMPLATES                                                     -->
<!-- ============================================================= -->

<xsl:template name="ahf:ant-paths">
  <xsl:if test="$verbose = ('true', 'yes')">
    <xsl:message>ant-paths.xsl <xsl:value-of select="$timestamp" /></xsl:message>
  </xsl:if>

  <xsl:comment> Autogenerated file.  DO NOT EDIT. </xsl:comment>
  <xsl:comment xml:space="preserve"> Created: <xsl:value-of select="$timestamp" /> </xsl:comment>
  <project name="{$project}" basedir=".">
    <!--<xsl:message select="$xsl.dir" />-->
      <xsl:text>&#xA;</xsl:text>
    <xsl:comment> ============================================================= </xsl:comment>
      <xsl:text>&#xA;</xsl:text>
    <xsl:comment> Paths for dependencies of XSLT files. </xsl:comment>
    <xsl:for-each
        select="collection(concat('file:///',
                                   $xsl.dir,
                                   (: Restrict initial letter to avoid
                                      Emacs temporary files that start
                                      with '#'. :)
                                   '?select=[A-Za-z0-9]*.xsl'))">
      <xsl:sort />
      <xsl:variable name="base-uri" select="base-uri(.)" />
      <!--<xsl:message select="$base-uri" />-->
      <xsl:text>&#xA;</xsl:text>
      <xsl:comment> '<xsl:value-of select="$base-uri" />' and dependencies </xsl:comment>
      <xsl:text>&#xA;</xsl:text>
      <path id="{ahf:basename($base-uri, '.xsl')}.path">
        <pathelement location="${{xsl.dir}}/{ahf:basename($base-uri)}" /><xsl:sequence select="ahf:dependencies(ahf:basename($base-uri))" />
      </path>
    </xsl:for-each>
    <xsl:comment xml:space="preserve"> <xsl:value-of select="$xsl.dir" /> </xsl:comment>
  </project>
</xsl:template>


<!-- ============================================================= -->
<!-- FUNCTIONS                                                     -->
<!-- ============================================================= -->

<xsl:function name="ahf:dependencies">
  <xsl:param name="current" as="xs:string" />

  <xsl:sequence
      select="ahf:dependencies($current,
                               $xsl.dir,
                               '${xsl.dir}')" />
</xsl:function>

<xsl:function name="ahf:dependencies">
  <xsl:param name="current" as="xs:string" />
  <xsl:param name="dir" as="xs:string" />
  <xsl:param name="dir-name" as="xs:string" />

  <xsl:comment
      xml:space="preserve"> <xsl:value-of select="$current" /> </xsl:comment>
  <xsl:variable
      name="current-doc"
      select="if (doc-available(concat('file:///', $dir, '/', $current)))
                then document(concat('file:///', $dir, '/', $current))
	      else ()"
      as="document-node()?" />
<!--<xsl:comment select="if (exists($current-doc)) then concat('yes ', count($current-doc/*/xsl:import)) else 'no'" />-->
  <xsl:for-each select="$current-doc/*/xsl:import">
    <xsl:text>&#xA;    </xsl:text>
    <pathelement location="{$dir-name}/{@href}" />
    <xsl:sequence select="ahf:dependencies(@href, $dir, $dir-name)" />
  </xsl:for-each>
</xsl:function>

</xsl:stylesheet>
